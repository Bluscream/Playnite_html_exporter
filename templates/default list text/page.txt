<!DOCTYPE html>
<html>
  <head>
    <title>%pagetitle%</title>
	<link rel="manifest" href="manifest.webmanifest">
	<meta name="viewport" content="width=device-width, initial-scale=0.5">
	<style>
.abs,
h2:after,
.cards .card:after {
  position: absolute;
}
.rel,
h2,
h2 strong,
.cards .card
{
  position: relative;
}
.fix {
  position: fixed;
}
.dfix {
  display: inline;
}
.dib {
  display: inline-block;
}
.db {
  display: block;
}
.dn {
  display: none;
}
.df {
  display: flex;
}
.dif {
  display: inline-flex;
}
.dg {
  display: grid;
}
.dig {
  display: inline-grid;
}
.vm,
h2,
h2 strong,
h2 span {
  vertical-align: middle;
}
body {
  background: #24282f;
  font-family: 'Arial';
}
.wrapper {
  padding: 15px;
}
h2 {
  padding: 10px;
  padding-left: 25px;
  color: #ccc;
  margin: 0;
  cursor:pointer;
}
h2 strong {
  z-index: 2;
  background: #24282f;
  padding: 4px 8px;
}
h2 span {
  font-size: 0.7em;
  color: #aaa;
  margin-left: 10px;
}
h2:after {
  content: '';
  z-index: 1;
  bottom: 50%;
  margin-bottom: -2px;
  height: 2px;
  left: 0;
  right: 0;
  background: #373d47;
}

#h2jscript {
  cursor:pointer;
}
.quicklinks {
  display: flex;
  flex-flow: row wrap;
  font-size: 24px;
  font-weight: bold;
}

.quicklink {
  margin: 10px;
}

/* link no underline */
a {
  text-decoration: none;
}

/* unvisited link */
a:link {
  color: #888;
}
/* visited link */
a:visited {
  color: #888;
}
/* mouse over link */
a:hover {
  color: #EEE;
}
/* selected link */
a:active {
  color: #888;
}


.Menu {
  display: flex;
  flex-flow: row wrap;
}

#BackTopButton {
  display: none; /* Hidden by default */
  position: fixed; /* Fixed/sticky position */
  bottom: 20px; /* Place the button at the bottom of the page */
  right: 30px; /* Place the button 30px from the right */
  z-index: 99; /* Make sure it does not overlap */
  border: none; /* Remove borders */
  outline: none; /* Remove outline */
  background-color: red; /* Set a background color */
  color: white; /* Text color */
  cursor: pointer; /* Add a mouse pointer on hover */
  padding: 15px; /* Some padding */
  border-radius: 10px; /* Rounded corners */
  font-size: 20px; /* Increase font size */
}

.MenuButton {
  border: none; /* Remove borders */
  outline: none; /* Remove outline */
  background-color: #555;/* Set a background color */
  color: #999/* Text color */
  cursor: pointer; /* Add a mouse pointer on hover */
  padding: 5px; /* Some padding */
  border-radius: 4px; /* Rounded corners */
  font-size: 20px;/* Increase font size */
  margin-top: 10px;
  margin-left: 15px;
  cursor:pointer;
  -webkit-appearance: button;
  -moz-appearance: button;
  appearance: button;
  text-decoration: none;
}

.MenuButton:hover {
  background-color: #666; /* Add a dark-grey background on hover */
  color: #999; /* Text color */
}

#BackTopButton:hover {
  background-color: #555; /* Add a dark-grey background on hover */
}

#label {
   font-size: 18px;
   color: #999;
      margin: 5px;
}

#label a {
   color: #999;
}

/* unvisited link */
#label a:link {
  color: #888;
}
/* visited link */
#label a:visited {
  color: #888;
}
/* mouse over link */
#label a:hover {
  color: #EEE;
}
/* selected link */
#label a:active {
  color: #888;
}

	                                                   /* scrollbars W3C standard that is currently Firefox-only */
* {
  scrollbar-width: thin;                               /* small width */
  scrollbar-color: #888 transparent;                   /* trackbar color + transparant background */
}

                                                       /* scrollbars on Chrome/Edge/Safari */
*::-webkit-scrollbar {
  width: 12px;                                         /* small width */
}

*::-webkit-scrollbar-track {
  background: transparent;                             /* background color track */
}

*::-webkit-scrollbar-thumb {
  background-color: #AAA;                              /* background */
  border-radius: 20px;                                 /* rounded corner, border */
  border: 3px solid #888;                              /* add the border */
}

.detailstable th, td {
  border: 0px;                                         /* no borders on td, th elements */
  color: #ccc;                                         /* details table text color */
  vertical-align: middle;                              /* align middle */
  text-align: left;                                    /* align text left */
}

.tdname {
  border: 0px;                                         /* no borders on td, th elements */
  color: #ccc;                                         /* details table text color */
  vertical-align: middle;                              /* align middle */
  text-align: left;                                    /* align text left */
}

.detailstable {
  width: 100%;                                         /* set to full width of details */
  padding: 5px;                                        /* add some padding */
  border-collapse: collapse;						   /* to make rows collapse if they are hidden using search */
  table-layout: fixed;
}

input{
  display: block;
  background: #fff;
  padding: .6rem;
  border-radius: 0.3rem;
  width: 300px;
  border: 0.1rem solid #BDBDBD;
  outline: none;
  height: 1rem;
}
input:hover{
	border: 0.1rem solid #0F52BA !important;
}

#searchbutton{
  display: block;
  background: #fff;
  padding: .6rem;
  border-radius: 0.3rem;
  width: 175px;
  border: 0.1rem solid #BDBDBD;
  outline: none;
  height: 2rem;
}
#searchbutton:hover{
	border: 0.1rem solid #0F52BA !important;
}
  </style>
  <script>
	function search() {
		var input, filter, games, game, i, j, txtValue, fragment, parentElement, wrapper, quicklinks, quicklink, quicklinkid, cards, needhide, numvisible, quicklinklinks, header;
		input = document.getElementById("search");
		filter = input.value.toUpperCase();
		wrapper = document.getElementById("wrapper");
		parentElement = wrapper.parentElement;
		fragment = document.createDocumentFragment();
		fragment.appendChild(wrapper.cloneNode(true));
		wrapper.remove();
		games = fragment.childNodes[0].getElementsByClassName("tdname");
		i = games.length - 1;
		
		while (i >= 0 ) {
			game = games[i];
			txtValue = game.childNodes[0].innerText;
			if (txtValue.toUpperCase().indexOf(filter) > -1) {
				game.parentElement.style.display = "";
			} else {
				game.parentElement.style.display = "none";
			}
			i--;
		}

		quicklinks = fragment.childNodes[0].querySelectorAll("tr[id^='quicklink-']")
		i = quicklinks.length - 1;
		while (i >= 0) {
			quicklink = quicklinks[i];
			quicklinkid = quicklink.id;
			cards = fragment.getElementById(quicklinkid.replace("quicklink-", ""));
			needhide = true;
			if(cards)
			{
				j = cards.children.length -1
				numvisible = 0;
				while (j >= 0)
				{
					if (cards.children[j].style.display == "")
					{
						needhide = false;
						numvisible++;
					}
					j--;
				}

				quicklinklinks = fragment.childNodes[0].querySelectorAll("a[href=\"#" + quicklinkid.replace(/["\\]/g, '\\$&') + "\"]")
				if (needhide)
				{
					quicklink.style.display = "none";
					quicklink.children[0].children[0].children[0].innerHTML = "&#x25BA;";
					quicklink.children[0].children[0].children[0].style.color = "#790000";
					quicklink.children[0].children[0].children[1].children[0].innerText = "( " + numvisible.toString() + " )";
					if (quicklinklinks.length == 1)
					{						
						quicklinklinks[0].style.display = "none";
					}
				} else {
					cards.style.display = "";
					quicklink.style.display = "";
					quicklink.children[0].children[0].children[0].innerHTML = "&#x25BC;";
					quicklink.children[0].children[0].children[0].style.color = "#007962";
					quicklink.children[0].children[0].children[1].children[0].innerText = "( " + numvisible.toString() + " )";
					if (quicklinklinks.length == 1)
					{						
						quicklinklinks[0].style.display = "";
					}
				}
			}
			i--;
		}

		parentElement.appendChild(fragment.childNodes[0]);

		//have to renable this
		const observer = lozad(); // lazy loads elements with default selector as '.lozad'
		observer.observe();

		var input = document.getElementById("search");

		// Execute a function when the user releases a key on the keyboard
		input.addEventListener("keyup", function(event) 
		{
			// Number 13 is the "Enter" key on the keyboard
			if (event.keyCode === 13) 
			{
				// Cancel the default action, if needed
				event.preventDefault();
				// Trigger the button element with a click
				document.getElementById("searchbutton").click();
			}
		});
	}
  </script>
  </head>
  <body>
    <button onclick="topFunction()" id="BackTopButton" title="Go to top">Top</button>
    <div class="wrapper" id="wrapper">
      %menuentryheader%
      <div class="Menu">%allmenuentries%</div>
      <h2><strong>Search</strong></h2><input type="text" id="search" placeholder="Search for game.." title="Type in a name"><br/><button onclick="search()" id="searchbutton">Search</button>
      %quicklinksheader%
      <div class="quicklinks">%allquicklinks%</div>
      <h2></h2>
      <div class="cards">
	  <TABLE  name="gamestable" class="detailstable" id="detailstable">
      <COLGROUP><COL WIDTH="60"><COL WIDTH="22%"><COL WIDTH="width="13%"><COL WIDTH="13%"><COL WIDHT="13%"><COL WIDHT="13%"><COL WIDHT="13%"><COL WIDHT="13%"></COLGROUP>
	  <THEAD><TR><TH></TH><TH><B><a href="%name_filename%">%name_name%</a></B></TH><TH><B><a href="%%groupfieldrealnamelowerexceptname%_filename%">%groupfieldexceptname% %groupfieldsortsymbolexceptname%</a></B></TH><TH><B><a href="%lastactivitysegment_filename%">%lastactivity_name%</a></B></TH><TH><B><a href="%added_filename%">%added_name%</a></B></TH><TH><B><a href="%playtime_filename%">%playtime_name%</a></B></TH><TH><B><a href="%source_filename%">%source_name%</a></B></TH><TH><B><a href="%platform_filename%">%platform_name%</a></B></TH></TR></THEAD>
	  <TBODY>
   	  %allgamecardswithheaders%
	  </TBODY>
	  </TABLE>
      </div>
    </div>
	<script>
	const observer = lozad(); // lazy loads elements with default selector as '.lozad'
	observer.observe();

	// Get the input field
	var input = document.getElementById("search");

	// Execute a function when the user releases a key on the keyboard
	input.addEventListener("keyup", function(event) {
	  // Number 13 is the "Enter" key on the keyboard
	  if (event.keyCode === 13) {
		// Cancel the default action, if needed
		event.preventDefault();
		// Trigger the button element with a click
		document.getElementById("searchbutton").click();
	  }
	});

	//Get the button:
	mybutton = document.getElementById("BackTopButton");

	// When the user scrolls down 20px from the top of the document, show the button
	window.onscroll = function() {scrollFunction()};

	function scrollFunction() {
	  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
		mybutton.style.display = "block";
	  } else {
		mybutton.style.display = "none";
	  }
	}

	// When the user clicks on the button, scroll to the top of the document
	function topFunction() {
	  document.body.scrollTop = 0; // For Safari
	  document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
	}
		
	function ShowHide(body_id){
	var elem

		elem = document.getElementById(body_id);
		elemclick = document.getElementById("eye-" + body_id);
		
		if(!elem) return true;
		if(!elemclick) return true;

		if (elem.style.display == "none") {
		  elem.style.display = "";
		  elemclick.innerHTML = "&#x25BC;";
		  elemclick.style.color = "#007962";
		}
		else {
		  elem.style.display = "none";
		  elemclick.innerHTML = "&#x25BA;";
		  elemclick.style.color = "#790000";
		}
		return true;
	}
   </script>
  </body>
</html>
